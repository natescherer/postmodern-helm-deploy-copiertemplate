## Initial Settings
_min_copier_version: "9.1.1"

_jinja_extensions:
  # External Dependencies
  - copier_templates_extensions.TemplateExtensionLoader
  - jinja2_shell_extension.ShellExtension
  - jinja2_time.TimeExtension
  # Internal Dependencies
  - extensions/azure_devops_extension.py:AzureDevOpsExtension
  - extensions/path_tests_extension.py:PathTestsExtension
  - extensions/github_extension.py:GitHubExtension
  - extensions/pre_render_functions_extension.py:PreRenderFunctionsExtension
  - extensions/context.py:ContextUpdater

_subdirectory: template

## Inherited Variables from Parent Template
parent_template_name:
  type: str
  default: Postmodern Helm Deployment Copier Template
  when: false
parent_template_url:
  type: str
  default: "https://github.com/natescherer/postmodern-helm-deploy-copiertemplate"
  when: false

## Questions
author_name:
  type: str
  help: The name to whom this project will be credited. Autodetect attempted from Git 'user.name'.
  default: "{{ 'git config --global user.name' | shell() | trim }}"

developer_platform:
  type: str
  help: The platform where you are going to host your Git repo and CI/CD.
  choices:
    GitHub:
      value: GitHub
      validator: Not Currently Implemented
    Azure DevOps:
      value: Azure DevOps

# Restore New/Existing validators once https://github.com/copier-org/copier/issues/1050 is resolved
repo_actions:
  type: str
  help: If you are making a new project and want to have this template create the repo, choose 'Create Repo'. If you are applying this template to an existing project and want to just set repository rules, choose 'Set Repo Rules'. If you want don't want the template to do any repo-related automations, choose 'None'.
  choices:
    Create Repo:
      value: Create Repo
      # validator: "{% if path_exists(_copier_conf.dst_path) %}Destination Folder Exists{% endif %}"
    Set Repo Rules:
      value: Set Repo Rules
      # validator: "{% if path_missing(_copier_conf.dst_path) %}Destination Folder Missing{% endif %}"
    None:
      value: None

github_token:
  type: str
  secret: true
  default: ""
  help: |
    A GitHub Personal Access Token which will be used to {% if repo_actions == 'Create Repo' %}initialize your new repository and apply rules.{% else %}apply rules to your existing repo.{% endif %} Value is not saved.
  when: "{{ developer_platform == 'GitHub' and repo_actions != 'None' }}"
  # validator: "{% if github_token is not valid_gh_token and (developer_platform == 'GitHub' and repo_actions != 'None') %}GitHub Token Invalid{% endif %}"

github_username:
  type: str
  help: Your GitHub username. Repo will be created under this user unless an org is specified. Autodetect attempted from Git 'user.email'.
  default: "{{ (('git config --global user.email' | shell()).split('+') | last).split('@') | first }}"
  when: "{{ developer_platform == 'GitHub' }}"

github_org:
  type: str
  help: (OPTIONAL) If this repo {% if repo_actions == 'Create Repo' %} should be created under{% else %}is part of{% endif %} a GitHub organization, supply its name here.
  when: "{{ developer_platform == 'GitHub' }}"

azdo_org:
  type: str
  help: The Azure DevOps organization to use for the new project.
  when: "{{ developer_platform == 'Azure DevOps' }}"
  # validator: "{% if azdo_org is not extant_azdo_org %}Azure DevOps Organization Does Not Exist{% endif %}"

azdo_token:
  type: str
  secret: true
  default: ""
  help: |
    An Azure DevOps Personal Access Token which will be used to {% if repo_actions == 'Create Repo' %}initialize your new repository and apply rules.{% else %}apply rules to your existing repo.{% endif %} Value is not saved.
  when: "{{ developer_platform == 'Azure DevOps' and repo_actions != 'None' }}"
  # validator: "{% if azdo_token is not valid_azdo_token_for_org(azdo_org) and (developer_platform == 'Azure DevOps' and repo_actions != 'None') %}Azure DevOps Token Invalid{% endif %}"

azdo_project:
  type: str
  help: An Azure DevOps project in organization '{{ azdo_org }}'.
  when: "{{ developer_platform == 'Azure DevOps' }}"
  # validator: "{% if azdo_project is not valid_azdo_project_for_token_and_org(azdo_token, azdo_org) %}Azure DevOps Project Doesn't Exist{% endif %}"

repo_name:
  type: str
  help: |
    The name of this project's Git repository. Will be {% if repo_actions == 'Create Repo' %}created{% else %}reused{% endif %} by this template.
  # validator: |
  #   {% if repo_actions == 'Create Repo' -%}
  #     {%- if developer_platform == 'GitHub' -%}
  #       {%- if repo_name is not available_gh_repo_name_for_owner(github_username) -%}
  #         GitHub Repo {{ github_username }}/{{ repo_name }} already exists
  #       {%- endif -%}
  #     {%- elif developer_platform == 'Azure DevOps' -%}
  #       {%- if repo_name is not available_azdo_repo_name_for_token_and_org_and_project(azdo_token, azdo_org, azdo_project) -%}
  #         Azure Devops Repo {{ azdo_org }}/{{ azdo_project }}/{{ repo_name }} already exists
  #       {%- endif -%}
  #     {%- endif -%}
  #   {%- else -%}
  #     {%- if developer_platform == 'GitHub' -%}
  #       {%- if repo_name is available_gh_repo_name_for_owner(github_username) -%}
  #         GitHub Repo {{ github_username }}/{{ repo_name }} does not exist
  #       {%- endif -%}
  #     {%- elif developer_platform == 'Azure DevOps' -%}
  #       {%- if repo_name is available_azdo_repo_name_for_token_and_org_and_project(azdo_token, azdo_org, azdo_project) -%}
  #         Azure Devops Repo {{ azdo_org }}/{{ azdo_project }}/{{ repo_name }} does not exist
  #       {%- endif -%}
  #     {%- endif -%}
  #   {%- endif %} #}

project_type:
  type: str
  help: If you are creating another Copier template that will inherit from this one, choose Template. Otherwise, choose Standard.
  choices:
    - Standard
    - Template

project_name:
  type: str
  help: The friendly name of the project that will be used in documentation.

project_short_description:
  type: str
  help: Enter a short description of your project to be used in documentation.

project_website:
  type: str
  help: (OPTIONAL) Enter the website for your project.

project_visibility:
  type: str
  help: Choose if you want this project to be Public or Private.
  choices:
    Public:
      value: Public
      validator: "{% if developer_platform == 'Azure DevOps' %}Not Supported on Azure DevOps{% endif %}"
    Private:
      value: Private

license:
  type: str
  help: Choose if you wish to use The MIT License for this project or provide your own.
  choices:
    - MIT
    - Provide Own
  when: "{{ project_visibility == 'Public' }}"

changelog_type:
  type: str
  help: Choose the type of changelog you want this project to use.
  choices:
    Keep a Changelog:
      value: Keep a Changelog
      validator: "{% if developer_platform == 'Azure DevOps' %}Not Supported on Azure DevOps{% endif %}"
    Conventional Changelog:
      value: Conventional Changelog

lifecycle:
  type: str
  help: Choose what state this project is in.
  choices:
    - Pre-Alpha
    - Alpha
    - Beta
    - Stable
    - Inactive

developer_platform:
  type: str
  help: The platform where you are going to host your Git repo and CI/CD.
  choices:
    GitHub:
      value: GitHub
      validator: Not Currently Implemented
    Azure DevOps:
      value: Azure DevOps

container_registry_type:
  type: str
  help: Choose what type of container registry stores your Helm chart.
  choices:
    Public & Unauthenticated Registry:
      value: Public
      validator: Not Currently Implemented
    Azure Container Registry:
      value: Azure Container Registry
  when: "{{ project_type == 'Standard' }}"

public_helm_repo_name:
  type: str
  help: The name of the public Helm repo; what you'd provide to 'helm repo add'.
  when: "{{ container_registry_type == 'Public' }}"

public_helm_repo_url:
  type: str
  help: The URL of the public Helm repo; what you'd provide to 'helm repo add'.
  when: "{{ container_registry_type == 'Public' }}"

acr_login_method:
  type: str
  help: Choose login method for Azure Container Registry.
  choices:
    - Admin Credentials (Automatic via Service Connection)
    - Admin Credentials (Manually Specified)
  when: "{{ container_registry_type == 'Azure Container Registry' }}"

acr_name:
  type: str
  help: The name of the Azure Container Registry
  when: "{{ container_registry_type == 'Azure Container Registry' }}"

acr_service_connection:
  type: str
  help: The name of the Azure DevOps Service Connection that has rights to the ACR.
  when: "{{ acr_login_method == 'Admin Credentials (Automatic via Service Connection)' }}"

acr_chart_prefix:
  type: str
  help: (OPTIONAL) If you share an ACR between multiple teams, put a team name here to have your charts logically separated.
  when: "{{ container_registry_type == 'Azure Container Registry' }}"

helm_chart_name:
  type: str
  help: The name of the Helm chart to deploy; what you'd provide to 'helm install'.
  when: "{{ project_type == 'Standard' }}"

helm_deployment_name:
  type: str
  help: The name of the Helm deployment that will be used with 'helm install'.
  default: "{{ helm_chart_name }}"
  when: "{{ project_type == 'Standard' }}"

## Computed Values

using_github:
  type: bool
  default: "{% if developer_platform == 'GitHub' %}true{% endif %}"
  when: false

using_azdo:
  type: bool
  default: "{% if developer_platform == 'Azure DevOps' %}true{% endif %}"
  when: false

using_mit:
  type: bool
  default: "{% if license == 'MIT' %}true{% endif %}"
  when: false

using_kac:
  type: bool
  default: "{% if changelog_type == 'Keep a Changelog' %}true{% endif %}"
  when: false

using_cc:
  type: bool
  default: "{% if changelog_type == 'Conventional Changelog' %}true{% endif %}"
  when: false

is_public:
  type: bool
  default: "{% if project_visibility == 'Public' %}true{% endif %}"
  when: false

is_standard:
  type: bool
  default: "{% if project_type == 'Standard' %}true{% endif %}"
  when: false

is_template:
  type: bool
  default: "{% if project_type == 'Template' %}true{% endif %}"
  when: false

is_prerelease:
  type: bool
  default: "{% if lifecycle == 'Pre-Alpha' or lifecycle == 'Alpha' or lifecycle == 'Beta' %}true{% endif %}"
  when: false

should_create_repo:
  type: bool
  default: "{% if repo_actions == 'Create Repo' %}true{% endif %}"
  when: false

should_set_repo_settings:
  type: bool
  default: "{% if repo_actions == 'Create Repo' or repo_actions == 'Set Repo Rules' %}true{% endif %}"
  when: false

## Tasks

_tasks:
  - >-
    {%- if is_template -%}
    invoke rename-template-files
    {%- endif -%}
  - >-
    {%- if should_create_repo and using_github -%}
    invoke create-repo-github --answers-json '{{ _copier_answers | to_json }}'
    {%- endif -%}
  - >-
    {%- if should_create_repo and using_azdo -%}
    invoke create-repo-azdo --answers-json '{{ _copier_answers | to_json }}'
    {%- endif -%}
  - >-
    {%- if should_set_repo_settings and using_github -%}
    invoke set-repo-settings-github --answers-json '{{ _copier_answers | to_json }}'
    {%- endif -%}
  - >-
    {%- if should_create_repo -%}
    invoke initialize-repo-and-commit-files --answers-json '{{ _copier_answers | to_json }}'
    {%- endif -%}
  - >-
    {%- if should_set_repo_settings and using_github -%}
    invoke set-branch-protection-ruleset-github --answers-json '{{ _copier_answers | to_json }}'
    {%- endif -%}
  - >-
    {%- if should_set_repo_settings and using_azdo -%}
    invoke create-pipelines-azdo --answers-json '{{ _copier_answers | to_json }}'
    {%- endif -%}
  - invoke delete-unneeded-template-files

---
!include copier-question-overrides.yml
