steps:
- task: HelmInstaller@1
  displayName: Install Helm
  inputs: 
    helmVersionToInstall: latest
- task: KubectlInstaller@0
  displayName: Install Kubectl
  inputs:
    kubectlVersion: latest
{%- if container_registry_type == "Azure Container Registry" %}
{%- if acr_login_method == "Admin Credentials (Automatic via Service Connection)" %}
- task: AzureCLI@2
  displayName: Authenticate to ACR
  inputs:
    azureSubscription: $(AcrAzSubscriptionServiceConnection)
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      $CredsJson = az acr credential show --name $(AcrName) --only-show-errors
      $CredsObject = ConvertFrom-Json ($CredsJson -join "`n")
      helm registry login $(AcrName).azurecr.io --username $CredsObject.username --password $CredsObject.passwords[0].value
{%- endif %}
{%- if acr_login_method == "Admin Credentials (Manually Specified)" %}
- pwsh: |
    helm registry login $(AcrName).azurecr.io --username $(AcrName) --password $env:AcrPassword
  displayName: Authenticate to ACR
  env:
    AcrPassword: $(AcrPasswordSecret)
{%- endif %}
{%- endif %}
- pwsh: |
    helm repo add $(HelmRepoName) $(HelmRepoUrl)
    helm repo update
  displayName: Add & Update Helm Repo
  failOnStderr: true
- task: AzureCLI@2
  displayName: Authenticate to AKS
  inputs:
    {%- raw %}
    azureSubscription: ${{ parameters.AzAKSClusterAzDOServiceConnection }}
    scriptType: pwsh
    scriptLocation: inlineScript
    inlineScript: az aks get-credentials --resource-group ${{ parameters.AzAKSClusterResourceGroup }} --name ${{ parameters.AzAKSCluster }} --admin --only-show-errors --overwrite-existing
    failOnStandardError: true
    {%- endraw %}
{%- if secret_storage_platform == "Azure Key Vault" %}
- task: AzureKeyVault@2
  displayName: Get Secrets from Key Vault
  inputs:
    azureSubscription: {% raw %}${{ parameters.AzKeyVaultAzDOServiceConnection }}{% endraw %}
    KeyVaultName: {% raw %}${{ parameters.AzKeyVault }}{% endraw %}
    SecretsFilter: 'secret1'
    RunAsPreJob: false
{%- endif %}
- pwsh: |
    $CurrentDeployment = helm list --namespace $env:K8sNamespace --filter $(HelmReleaseName) --output json

    if ($CurrentDeployment -ne "[]") {
      Write-Host "Helm deployment already exists; set arguments for an upgrade"
      $HelmArguments = @(
        "upgrade",
        "$(HelmReleaseName)",
        "$(HelmRepoName)/$(HelmChartName)",
        "--values values.yaml",
        "--version $env:HelmChartVersion"
        "--namespace $env:K8sNamespace",
        "--atomic",
        "--cleanup-on-fail",
        "--wait"
      )
    } else {
      Write-Host "Helm deployment doesn't exist; set arguments for an install"
      $HelmArguments = @(
        "install",
        "$(HelmReleaseName)",
        "$(HelmRepoName)/$(HelmChartName)",
        "--version $env:HelmChartVersion"
        "--values values.yaml",
        "--namespace $env:K8sNamespace",
        "--wait"
      )
    }

    # Add --set arguments here, if needed

    $ProcessReturn = Start-Process -FilePath "helm" -ArgumentList $HelmArguments -PassThru -Wait
    if ($ProcessReturn.ExitCode -ne 0) {
      throw "Helm failed!"
    }
  displayName: Helm Install/Upgrade
  env:
    {%- raw %}
    HelmChartVersion: ${{ parameters.HelmChartVersion }}
    K8sNamespace: ${{ parameters.K8sNamespace }}
    {%- endraw %}
  failOnStderr: true
- pwsh: |
    helm repo remove $(HelmRepoName) $(HelmRepoUrl)
  displayName: Remove Helm Repo
  failOnStderr: true
  condition: always()