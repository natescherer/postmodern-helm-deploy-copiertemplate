{%- set deploy_group_match = "Primary" %}
{%- set pool_name = "" %}
name: $(BuildId)

trigger:
  branches:
    exclude:
    - '*'

parameters:
  - name: HelmChartVersion
    type: string

variables:
{%- if container_registry_type == "Azure Container Registry" %}
  AcrName: {{ acr_name }}
{%- elif container_registry_type == "Public" %}
  HelmRepoName: {{ helm_repo_name }}
  HelmRepoUrl: {{ helm_repo_url }}
{%- endif %}
  HelmChartName: {{ helm_chart_name }}
{%- if container_registry_type == "Azure Container Registry" %}
  HelmChartLocation: oci://$(AcrName).azurecr.io/helm/$(HelmChartName)
{%- elif container_registry_type == "Public" %}
  HelmChartLocation: $(HelmRepoName)/$(HelmChartName)
{%- endif %}
  HelmReleaseName: {{ helm_release_name }}

{%- if pool_name %}
pool: {{ pool_name }}
{%- else %}
pool:
  vmImage: ubuntu-latest
{%- endif %}

stages:
  - stage:
    displayName: Set up Environment
    jobs:
      - job: set_up_env
        displayName: Set up Environment
        steps:
          - pwsh: |
              $Date = Get-Date -Format "yyyyMMddHHmm"
              Write-Host "##vso[build.updatebuildnumber]Chart-$($env:HelmChartVersion)_$Date"
            displayName: Calculate and set build number
            env:
              HelmChartVersion: {% raw %}${{ parameters.HelmChartVersion }}{% endraw %}
            failOnStderr: true
{%- for env in k8s_envs %}
{%- if env["deploy_group"] == deploy_group_match %}
{% set base_name = env["aks_cluster_name"] + "_" + env["namespace"] %}
  - stage: {{ base_name | slugify | replace("-","_") }}
    variables:
      K8sNamespace: {{ env["namespace"] }}
      {%- if env["type"] == "aks" %}
      AKSCluster: {{ env["aks_cluster_name"] }}
      AKSClusterResourceGroup: {{ env["aks_resource_group"] }}
      {%- endif %}
      {%- if secret_storage_platform == "Azure Key Vault" %}
      AzKeyVaultName: {{ env["az_key_vault_name"] }}
      {%- endif %}
    jobs:
      - deployment: {{ base_name | slugify | replace("-","_") }}
        environment: {{ env["aks_cluster_name"] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: azure-pipelines-deploy-steps-part1.yml
                {%- if env["type"] == "aks" %}
                - task: KubeloginInstaller@0
                  displayName: Install Kubelogin
                - task: AzureCLI@2
                  displayName: Authenticate to AKS
                  inputs:
                    azureSubscription: {{ env["aks_service_connection"] }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az aks get-credentials --resource-group $(AKSClusterResourceGroup) --name $(AKSCluster) --only-show-errors --overwrite-existing --format azure
                      kubelogin convert-kubeconfig -l azurecli
                    failOnStandardError: true
                {%- endif %}
                - template: azure-pipelines-deploy-steps-part2.yml
                  parameters:
                    AKSServiceConnection: {{ env["aks_service_connection"] }}
                    AzKeyVaultServiceConnection: {{ env["az_key_vault_service_connection"] }}
                    HelmChartVersion: {% raw %}${{ parameters.HelmChartVersion }}{% endraw %}
{%- endif %}
{%- endfor %}
